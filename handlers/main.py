from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from logging import log, INFO
from filters import AuthCheck, AdminCheck

from backend_4me import check_admin
from loader import dp


@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    help_message = """
    –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n
    <b>/start</b> - –Ω–∞—á–∞–ª–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º;\n
    <b>/auth</b> - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –Ω–∞ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É);\n
    <b>/request</b> - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É;\n
    <b>/cancel</b> - –æ—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è;\n
    <b>/logout</b> - –¥–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–µ—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ);\n
    <b>/admin</b> - —Ä–∞–±–æ—Ç–∞ —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –≤–∞–º (–¥–ª—è –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏).\n
    """
    await message.answer(help_message)


@dp.message_handler(AdminCheck(), commands=['start'])
async def cmd_start_admin(message: types.Message, id4me):
    log(INFO, f"ADMIN [{message.from_user.id}] –Ω–∞–∂–∞–ª START.")
    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏! üß∞ üíª")
    await message.answer("üîß –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n<b>/request</b>")
    answer = await check_admin(id4me)
    teams = []
    team_names = []
    for team in answer:
        teams.append(team['id'])
        team_names.append(team['name'])
    if teams:
        log(INFO, f"user_id[{message.from_user.id}] push start, –≤—Ö–æ–¥–∏—Ç –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É [{teams}]")
        msg = ''
        for team_name in team_names:
            msg += team_name + '\n'
        await message.answer(f"üõ† –í—ã –≤—Ö–æ–¥–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥—ã —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n{msg}"
                             f"–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –≤–∞–º, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n<b>/admin</b>")


@dp.message_handler(AuthCheck(), commands=['start'])
async def cmd_start_user(message: types.Message, id4me):
    """
    Conversation's entry point
    """
    log(INFO, f"USER [{message.from_user.id}] –Ω–∞–∂–∞–ª START.")
    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏! üß∞ üíª")
    await message.answer("üîß –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n<b>/request</b>")


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    """
    Conversation's entry point
    """
    log(INFO, f"USER WITHOUT AUTH [{message.from_user.id}] –Ω–∞–∂–∞–ª START.")
    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏! üß∞ üíª")
    await message.answer("üë§ –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –ø—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ –∫–æ–º–∞–Ω–¥–µ:\n<b>/auth</b>")
    await message.answer("‚ÑπÔ∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º —á–∞—Ç-–±–æ—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n<b>/help</b>")


# You can use state '*' if you need to handle all states
@dp.message_handler(Text(equals='cancel', ignore_case=True), state='*')
@dp.message_handler(Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
@dp.message_handler(state='*', commands=['cancel'])
async def cancel_handler(message: types.Message, state: FSMContext):
    """
    Allow user to cancel any action
    """
    log(INFO, f"[{message.from_user.id}] –æ—Ç–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ.")
    await state.finish()
    await message.reply('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=types.ReplyKeyboardRemove())
