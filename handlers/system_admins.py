from logging import log, INFO

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, Regexp
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from filters import AdminCheck
from loader import dp, bot, db, fourme
from utils.utilities import make_text


class Action(StatesGroup):
    Reply = State()
    Close = State()


@dp.message_handler(AdminCheck(), Command("admin"))
async def admin_start(message: types.Message, id4me):
    log(INFO, f"Open admin menu. userid[{message.from_user.id}]")
    answer = await fourme.get_requests_for_member(id4me)
    if not answer:
        await message.answer("–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –≤–∞–º –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∑–∞–ø—Ä–æ—Å—ã.")
        return
    inline_keyboard = InlineKeyboardMarkup()
    for request in answer:
        text = str(request["id"]) + ": " + request["subject"]
        inline_button = InlineKeyboardButton(text=text, callback_data=f'request_id={request["id"]}')
        inline_keyboard.add(inline_button)
    await message.answer(f"–ó–∞–ø—Ä–æ—Å—ã –¥–ª—è –≤–∞—Å:", reply_markup=inline_keyboard)


@dp.message_handler(Command("admin"))
async def non_admin_start(message: types.Message):
    await message.reply("–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –∏–Ω–∂–µ–Ω–µ—Ä–∞–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")

    # await message.reply("–í—ã –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    # log(INFO, f"Open admin menu. userid[{message.from_user.id}]")
    # answer = await check_admin(id4me)
    # for team in answer:
    #     team_id = team['id']
    #     team_name = team["name"]
    #     inline_keyboard = InlineKeyboardMarkup()
    #     answer = await get_requests_for_team(team_id)
    #     for request in answer:
    #         text = str(request["id"]) + ": " + request["subject"]
    #         inline_button = InlineKeyboardButton(text=text, callback_data=request["id"])
    #         inline_keyboard.add(inline_button)
    #     await message.answer(f"–ó–∞–ø—Ä–æ—Å—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã {team_name}:", reply_markup=inline_keyboard)


@dp.callback_query_handler(AdminCheck(), Regexp('request_id=([0-9]*)'))
async def get_request_info(callback: types.CallbackQuery):
    request_id = callback.data.split("=")[1]
    request = await fourme.get_request(request_id)
    notes = await fourme.get_notes_for_request(request_id)
    report = f'<b>–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:</b> <code>{request["id"]}</code>\n' \
             f'<b>–¢–µ–º–∞:</b> {request["subject"]}\n' \
             f'<b>–ê–≤—Ç–æ—Ä:</b> {request["requested_by"]["name"]}\n' \
             f'<b>–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:</b> {request["created_at"].replace("T", " ").split("+")[0]}\n' \
             f'<b>–¶–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è:</b> {request["resolution_target_at"].replace("T", " ").split("+")[0]}\n\n'
    for note in notes:
        report += f"<i>{make_text(note['text'])}\n\n</i>"
    # buttons = [[InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å üí¨", callback_data=f"reply={request_id}"),
    #             InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å ‚úÖ", callback_data=f"close={request_id}")]]
    buttons = [[InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å üí¨", callback_data=f"reply={request_id}")]]
    actions_to_request = InlineKeyboardMarkup(row_width=2, inline_keyboard=buttons)
    await bot.send_message(callback.from_user.id, f"{report}", reply_markup=actions_to_request)


@dp.callback_query_handler(AdminCheck(), Regexp('reply=([0-9]*)'))
async def request_reply(callback: types.CallbackQuery, state: FSMContext):
    request_id = callback.data.split("=")[1]
    async with state.proxy() as data:
        data["request_id"] = request_id
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ ‚Ññ{request_id}:")
    await Action.Reply.set()


@dp.message_handler(AdminCheck(), state=Action.Reply)
async def make_reply_to_request(message: types.Message, state: FSMContext):
    data = await state.get_data()
    request_id = data['request_id']
    text = message.text.replace('\n', ' ') + " (–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ —á–∞—Ç-–±–æ—Ç–∞ https://t.me/itHelpDigitalCenter_bot)"
    answer = await fourme.post_note_to_request(request_id, text)
    log(INFO, f"ADMIN [{message.from_user.id}] posted note with id [{answer['id']}] to [{request_id}]")
    request = await fourme.get_request(request_id)
    id4me_requested_for = request['requested_for']['id']
    # telegram_requested_for = get_telegram_from_id(id4me_requested_for)
    telegram_requested_for = db.select_user(id4me=id4me_requested_for)
    if telegram_requested_for:
        try:
            await bot.send_message(telegram_requested_for, f"–ö –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ <code>{request_id}</code> –¥–æ–±–∞–≤–ª–µ–Ω "
                                                           f"–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n\n "
                                                           f"<i>{text}</i>")
            log(INFO, f"–ê–≤—Ç–æ—Ä—É [{telegram_requested_for}] –∑–∞–ø—Ä–æ—Å–∞ [{request_id}] –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")
        except:
            pass
    await message.answer(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ ‚Ññ{request_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    await state.finish()
